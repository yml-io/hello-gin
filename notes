// 任何声明 struct 结构中使用反引号的注解，可以修改序列化后的值，例如  `json:"user"`
// printf 中 %v 可以打印出 map 结构
// 路径中可以有 ：， *
// context 里面有 ： param fullpath DefaultQuery query  postform defaultpostform  MustGet
// querymap 和 postformmap 可以获取通过 query 参数传递过来的 map， 以及 form 传递过来的 map
// gin.Context 的 String JSON XML YAML ProtoBuf AsciiJSON PureJSON 都是可以返回一个 statuscode 和 一个 struct 的对象
// 另外的返回还有： SecureJSON
// JSONP 会将返回传到 url 中的回调函数里面
// 重定向： Redirect 指定一个外部或者内部的地址
// 		或者使用一个 router 重定向：   一个存在的 router 定义的路径
// c.Request.URL.Path = "/test2"
// r.HandleContext(c)


// 额外的中间件，给特定路由 r.GET("/benchmark", MyBenchLogger(), benchEndpoint)
// route.Any("/testing", startPage)   c.ShouldBindQuery(&person) == nil


// 可以将request 的数据绑定到特定的数据类型
// ShouldBind 属于消耗性的操作，当一次不成功之后，第二次再使用 context 中的数据，会发生错误 （需要验证）
// 而 ShouldBindBodyWith 不会。因为他先进行复制，所以有性能影响。ShouldBindBodyWith 在绑定之前将 body 存储到上下文中。这对性能有轻微影响，因此如果您足以立即调用绑定，则不应使用此方法。
// 仅某些格式需要此功能——JSON、XML、MsgPack、ProtoBuf
// 对于其他格式，Query、Form、FormPost、FormMultipart 可以由 c.ShouldBind() 多次调用，而不会对性能造成任何损害
// 可以使用的 shuld 类型的方法有
// ShouldBind, ShouldBindJSON, ShouldBindXML, ShouldBindQuery, ShouldBindYAML, ShouldBindHeader. ShouldBindUri
// gin.Context 绑定指定的数据，就可以调用对应的函数。
// shouldBind 可以绑定 form 表单数据，例如 c.ShouldBind(&fakeForm{ Colors []string `form:"colors[]"` })
// type Login struct {
// 	User     string `form:"user" json:"user" xml:"user"  binding:"required"`
// 	Password string `form:"password" json:"password" xml:"password" binding:"-"`
//  Birthday   time.Time `form:"birthday" time_format:"2006-01-02" time_utc:"1"`
// }
// If `GET`, only `Form` binding engine (`query`) used.
// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).
// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48


// 也可有自定义的校验方法， ----   Custom Validators
// 绑定multipart 的表单数据  ----  Multipart/Urlencoded binding


	// served data from reader
	// r.GET("/someDataFromReader", func(c *gin.Context) {
	// 	response, err := http.Get("https://raw.githubusercontent.com/gin-gonic/logo/master/color.png")
	// 	if err != nil || response.StatusCode != http.StatusOK {
	// 		c.Status(http.StatusServiceUnavailable)
	// 		return
	// 	}

	// 	reader := response.Body
	// 	defer reader.Close()
	// 	contentLength := response.ContentLength
	// 	contentType := response.Header.Get("Content-Type")

	// 	extraHeaders := map[string]string{
	// 		"Content-Disposition": `attachment; filename="gopher.png"`,
	// 	}

	// 	c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)
	// })

	// 还有其他更详细的自定义模版的例子 ---- Custom Template renderer
}

// Auth 中间件  ----  Using BasicAuth() middleware
// 如果在中间件里面启动异步操作，需要用 cCp := c.Copy() 复制context变量逃逸到堆上，并且不能修改


// ---- Bind form-data request with custom struct and custom tag
// ---- http2 server push
